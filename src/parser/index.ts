/**
 *   ____                           _ _
 *  / ___| ___ _ __   ___ _ __ __ _| (_)_______ _ __
 * | |  _ / _ \ '_ \ / _ \ '__/ _` | | |_  / _ \ '__|
 * | |_| |  __/ | | |  __/ | | (_| | | |/ /  __/ |
 *  \____|\___|_| |_|\___|_|  \__,_|_|_/___\___|_|
 *
 * @file Declares the `papaparse` library configuration objects
 * that are used by `Generalizer` on a per-vendor basis.
 */
import { parse, ParseConfig, ParseResult } from 'papaparse'
import { InvalidVendorError } from '../exception'
import { GeneticAnalysisVendorEnum, normalizeGeneraData } from '../vendor'

/**
 * Defines a common structure for all parsed raw genetic files.
 */
interface NormalizedSNPData {
  /** The regular RSID code */
  rsid: string
  /** A binary representation of the nucleobase combination */
  nucleobase: number
}

/**
 * Parses a raw genetic file.
 *
 * @param {string} rawData The raw genetic file contents read as string
 * @param {GeneticAnalysisVendorEnum} vendor The genetic vendor that provided/generated this file
 *
 * @returns {Promise<NormalizedSNPData[]>} A promise that resolves to an array containing the parsed raw file contents
 */
async function parseRawGeneticFileText (rawData: string, vendor: GeneticAnalysisVendorEnum): Promise<NormalizedSNPData[]> {
  const parsedContents: ParseResult<any> = await parse(rawData, PARSER_CONFIGURATION[vendor])
  const normalizedContents: NormalizedSNPData[] = normalizeParsedGeneticFile(parsedContents, vendor)

  return normalizedContents
}

/**
 * Normalizes results generated by `parseRawGeneticFileText` to standarize the data
 * across `Generalizer`.
 *
 * @param {ParseResult} parsedResults Results generated by @function parseRawGeneticFileText or a raw `papaparse` call
 * @param {GeneticAnalysisVendorEnum} vendor The genetic vendor that provided/generated this file
 *
 * @returns {NormalizedSNPData[]} Array of standarized SNP data
 */
function normalizeParsedGeneticFile (parsedResults: ParseResult<any>, vendor: GeneticAnalysisVendorEnum): NormalizedSNPData[] {
  switch (vendor) {
    case GeneticAnalysisVendorEnum.GENERA: {
      return normalizeGeneraData(parsedResults)
    }
    default: {
      throw new InvalidVendorError()
    }
  }
}

/**
 * Maps all available `papaparse` configuration objects available
 * for `Generalizer`.
 */
const PARSER_CONFIGURATION: { [key in GeneticAnalysisVendorEnum]: ParseConfig} = {
  [GeneticAnalysisVendorEnum.GENERA]: {
    delimiter: ',',
    newline: '\n',
    header: true,
    fastMode: true
  }
}

export {
  NormalizedSNPData,

  PARSER_CONFIGURATION,

  parseRawGeneticFileText,
  normalizeParsedGeneticFile
}

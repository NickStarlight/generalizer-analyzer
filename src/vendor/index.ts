/**
 *   ____                           _ _
 *  / ___| ___ _ __   ___ _ __ __ _| (_)_______ _ __
 * | |  _ / _ \ '_ \ / _ \ '__/ _` | | |_  / _ \ '__|
 * | |_| |  __/ | | |  __/ | | (_| | | |/ /  __/ |
 *  \____|\___|_| |_|\___|_|  \__,_|_|_/___\___|_|
 *
 * @file Declares vendor specific parsing strategy and normalization
 * functions.
 */
import { ParseResult } from 'papaparse'
import { NormalizedSNPData } from '../parser/index.js'
import { nucleobaseTextToBinary } from '../snp/index.js'

/**
 * Defines the regex mask for validating SNP's RSID.
 *
 * This is a lousy definition, there's no ISO or any other
 * standard to represent and exactly define the format.
 *
 * @see https://www.ncbi.nlm.nih.gov/snp/docs/RefSNP_about/
 */
const SNP_RSID_FORMAT_REGEX: RegExp = /rs[0-9]{3,12}/

/**
  * Defines the regex mask for validating SNP's nucleobases.
  */
const SNP_NUCLEOBASE_FORMAT_REGEX: RegExp = /[AGTC]{2}/

/**
 * Defines the supported vendors that
 * `Generalizer` can work with.
 */
enum GeneticAnalysisVendorEnum {
  /**
   * Genera is a Brazilian genetic analysis vendor
   * @see https://www.genera.com.br
   */
  GENERA
}

/**
 * Normalizes data from the `Genera` genetic vendor.
 *
 * @param {ParseResult} parsedResults Results generated by @function parseRawGeneticFileText or a raw `papaparse` call
 * @returns {NormalizedSNPData[]} Array of filtered and normalized SNP's
 */
function normalizeGeneraData (parsedResults: ParseResult<any>): NormalizedSNPData[] {
  /** Cleanup possible weird and inconsistent data that Genera may return */
  const filteredData = parsedResults.data.filter(line =>
    SNP_RSID_FORMAT_REGEX.test(line.RSID) && SNP_NUCLEOBASE_FORMAT_REGEX.test(line.RESULT)
  )

  /** Normalize the data */
  const normalizedData: NormalizedSNPData[] = filteredData.map(line => ({
    rsid: line.RSID,
    nucleobase: nucleobaseTextToBinary(line.RESULT)
  }))

  return normalizedData
}

export {
  GeneticAnalysisVendorEnum,

  normalizeGeneraData
}
